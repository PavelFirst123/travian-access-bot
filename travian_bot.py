from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = 6531829050  # ‚Üê –¢–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å: user_id ‚Üí –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å
pending_roles = {}

# –ö–Ω–æ–ø–∫–∏ —Ä–æ–ª–µ–π
role_links = {
    "–û—Ñ—Ñ": [("üì¶ –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –û—Ñ—Ñ", "https://t.me/addlist/6XIB_me1UYlhMDNk")],
    "–î–µ—Ñ—Ñ": [("üõ° –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –î–µ—Ñ—Ñ", "https://t.me/addlist/uv1ZpnRg1_JkYTg8")],
    "–†–∞–∑–≤–µ–¥–∫–∞": [("üïµ –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –†–∞–∑–≤–µ–¥–∫–∏", "https://t.me/addlist/7iU3qTh6dSVmNmVk")],
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç": [("üîß –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –¢–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "https://t.me/addlist/hv9Lf2yT9m1kZjRk")],
    "–¢–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø": [("üîó –û–±—â–∏–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)", "https://t.me/addlist/4vn6JsYqmLtjZDJk")]
}

role_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
role_keyboard.add(
    KeyboardButton("–û—Ñ—Ñ"),
    KeyboardButton("–î–µ—Ñ—Ñ"),
    KeyboardButton("–†–∞–∑–≤–µ–¥–∫–∞"),
    KeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"),
    KeyboardButton("–¢–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø")
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –∞–ª—å—è–Ω—Å–µ:", reply_markup=role_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@dp.message_handler(lambda message: message.text in role_links)
async def ask_nickname(message: types.Message):
    role = message.text
    user_id_str = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ —É–∂–µ
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("Travian Logs").sheet1
    ids = sheet.col_values(2)

    if user_id_str in ids:
        index = ids.index(user_id_str) + 1
        old_role = sheet.cell(index, 5).value
        await message.reply(f"‚ö†Ô∏è –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: *{old_role}*\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –æ—Ñ–∏—Ü–µ—Ä—É.", parse_mode="Markdown")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    pending_roles[message.from_user.id] = role
    await message.reply("üß© –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π **–∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º**:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
@dp.message_handler(lambda message: message.from_user.id in pending_roles)
async def receive_nickname(message: types.Message):
    user_id = message.from_user.id
    role = pending_roles[user_id]
    nickname = message.text.strip()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("Travian Logs").sheet1

    # –ó–∞–ø–∏—Å—å
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([
        now,
        str(user_id),
        message.from_user.username or "",
        message.from_user.full_name,
        role,
        nickname
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫
    links = role_links[role]
    text = f"üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–æ–ª–∏ *{role}*:\n\n"
    for name, url in links:
        text += f"{name}: [–ø–µ—Ä–µ–π—Ç–∏]({url})\n"
    await message.reply(text, parse_mode="Markdown")

    # –û—á–∏—Å—Ç–∫–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    del pending_roles[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /reset (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@dp.message_handler(commands=['reset'])
async def reset_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    username_to_remove = message.get_args().strip().lstrip('@')
    if not username_to_remove:
        await message.reply("‚úèÔ∏è –£–∫–∞–∂–∏ username: /reset @username")
        return

    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("Travian Logs").sheet1

    usernames = sheet.col_values(3)
    if username_to_remove not in usernames:
        await message.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        return

    index = usernames.index(username_to_remove) + 1
    sheet.delete_rows(index)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_remove} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.")

# –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message_handler()
async def fallback(message: types.Message):
    await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
