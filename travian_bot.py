from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

# Telegram token –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –†–æ–ª–∏ –∏ —Å—Å—ã–ª–∫–∏
role_links = {
    "–û—Ñ—Ñ": [("üì¶ –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –û—Ñ—Ñ", "https://t.me/addlist/6XIB_me1UYlhMDNk")],
    "–î–µ—Ñ—Ñ": [("üõ° –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –î–µ—Ñ—Ñ", "https://t.me/addlist/uv1ZpnRg1_JkYTg8")],
    "–†–∞–∑–≤–µ–¥–∫–∞": [("üïµ –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –†–∞–∑–≤–µ–¥–∫–∏", "https://t.me/addlist/7iU3qTh6dSVmNmVk")],
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç": [("üîß –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –¢–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "https://t.me/addlist/hv9Lf2yT9m1kZjRk")],
    "–¢–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø": [("üîó –û–±—â–∏–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)", "https://t.me/addlist/4vn6JsYqmLtjZDJk")]
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π
role_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
role_keyboard.add(
    KeyboardButton("–û—Ñ—Ñ"),
    KeyboardButton("–î–µ—Ñ—Ñ"),
    KeyboardButton("–†–∞–∑–≤–µ–¥–∫–∞"),
    KeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"),
    KeyboardButton("–¢–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø")
)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –∞–ª—å—è–Ω—Å–µ:", reply_markup=role_keyboard)

@dp.message_handler(lambda message: message.text in role_links)
async def send_links(message: types.Message):
    role = message.text
    user_id_str = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü–µ
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("Travian Logs").sheet1
    ids = sheet.col_values(2)

    if user_id_str in ids:
        index = ids.index(user_id_str) + 1
        old_role = sheet.cell(index, 5).value
        await message.reply(f"‚ö†Ô∏è –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: *{old_role}*\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –æ—Ñ–∏—Ü–µ—Ä—É.", parse_mode="Markdown")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫
    links = role_links[role]
    text = f"üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–æ–ª–∏ *{role}*:\n\n"
    for name, url in links:
        text += f"{name}: [–ø–µ—Ä–µ–π—Ç–∏]({url})\n"
    await message.reply(text, parse_mode="Markdown")

    # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([
        now,
        user_id_str,
        message.from_user.username or "",
        message.from_user.full_name,
        role
    ])

@dp.message_handler()
async def fallback(message: types.Message):
    await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
