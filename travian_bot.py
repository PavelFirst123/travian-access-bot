from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°—Å—ã–ª–∫–∏ –ø–æ —Ä–æ–ª—è–º
role_links = {
    "–û—Ñ—Ñ": [("üì¶ –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –û—Ñ—Ñ", "https://t.me/addlist/6XIB_me1UYlhMDNk")],
    "–î–µ—Ñ—Ñ": [("üõ° –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –î–µ—Ñ—Ñ", "https://t.me/addlist/uv1ZpnRg1_JkYTg8")],
    "–†–∞–∑–≤–µ–¥–∫–∞": [("üïµ –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –†–∞–∑–≤–µ–¥–∫–∏", "https://t.me/addlist/7iU3qTh6dSVmNmVk")],
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç": [("üîß –ù–∞–±–æ—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è –¢–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "https://t.me/addlist/hv9Lf2yT9m1kZjRk")],
    "–¢–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø": [("üîó –û–±—â–∏–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)", "https://t.me/addlist/4vn6JsYqmLtjZDJk")]
}

# –ö–Ω–æ–ø–∫–∏
role_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
role_keyboard.add(
    KeyboardButton("–û—Ñ—Ñ"),
    KeyboardButton("–î–µ—Ñ—Ñ"),
    KeyboardButton("–†–∞–∑–≤–µ–¥–∫–∞"),
    KeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"),
    KeyboardButton("–¢–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø")
)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –∞–ª—å—è–Ω—Å–µ:", reply_markup=role_keyboard)

@dp.message_handler(lambda message: message.text in role_links)
async def send_links(message: types.Message):
    role = message.text
    links = role_links[role]
    text = f"üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–æ–ª–∏ *{role}*:\n\n"
    for name, url in links:
        text += f"{name}: [–ø–µ—Ä–µ–π—Ç–∏]({url})\n"
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler()
async def fallback(message: types.Message):
    await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
